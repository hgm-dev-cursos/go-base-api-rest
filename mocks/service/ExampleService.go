// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/henriquegmendes/go-base-api-rest/dtos/request"
	mock "github.com/stretchr/testify/mock"

	response "github.com/henriquegmendes/go-base-api-rest/dtos/response"
)

// ExampleService is an autogenerated mock type for the ExampleService type
type ExampleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, exampleRequest
func (_m *ExampleService) Create(ctx context.Context, exampleRequest request.ExampleRequest) (*response.ExampleResponse, error) {
	ret := _m.Called(ctx, exampleRequest)

	var r0 *response.ExampleResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ExampleRequest) *response.ExampleResponse); ok {
		r0 = rf(ctx, exampleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ExampleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ExampleRequest) error); ok {
		r1 = rf(ctx, exampleRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExampleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewExampleService creates a new instance of ExampleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExampleService(t mockConstructorTestingTNewExampleService) *ExampleService {
	mock := &ExampleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
